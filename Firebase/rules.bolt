
path /admins is Map<String, Boolean>
{
  read() {isUser(currentUser())}
  write() {isUser(currentUser())&& isAdmin(currentUser())}
}

path /users/{uid} is User{
  read() {uid== currentUser() || isAdmin(currentUser())}
  write() {uid==currentUser() || isAdmin(currentUser())}
}

path /notifications is Notification{
  read() {isSubscribed(currentUser())|| isAdmin(currentUser())}
  write() {isAdmin(currentUser())}
}

type Notification{
  symbol: String,
  price: String,
  message: String,
  author: String

}
/*
type InitTimeStamp extends Number{
  validate() {initial(this, now)}
}*/

type CurTimeStamp extends Number{
  validate() {this==now}
}

type User{
  uid: String,
  name: String,
  email: String,
  services: Map<Service, Boolean>
}

type Permission extends String{
  validate() {this=='admin' || this=='client'}
}
type Service extends String{
  validate() {this=='notifications' || this=='newsletter' || this=='analysis' || this== 'full_enroll'}
}

isSubscribed(uid){isUser(uid) && root.users[uid].services['notifications']==true}
isAdmin(uid) {auth!=NULL && isUser(uid) && root.admins[uid]==true}
isUser(uid) {auth!=NULL && root.users[uid]!=null && uid==currentUser()}
currentUser(){auth.uid}

/*
initial(value, init){
  value==(prior(value)==null ? init: prior(value))
}
*/
